pipeline {
    agent {
        label params.AGENT_NAME
    }
    environment {
        CURRENT_USER = sh(script: "whoami", returnStdout: true).trim()
        HOME_PATH = "${env.CURRENT_USER == "root" ? "/root" : "/home/${env.CURRENT_USER}"}"
    }
    parameters {
        string(name: "AGENT_NAME", defaultValue: "master", description: "Node name or label.")
        string(name: "TOKEN", defaultValue: "", description: "Provide CRUMB token.")
    }
    stages {
        stage ("Check for existing keys") {
            steps {
                script {
                    println("Running as ${CURRENT_USER}")
                    SSH_KEYS_EXIST = sh(script: "test ! -f ${env.HOME_PATH}/.ssh/id_ed25519.pub && test ! -f ${env.HOME_PATH}/.ssh/id_ed25519", returnStatus: true)
                    if (SSH_KEYS_EXIST) {
                        error("Keys are already available in ${env.HOME_PATH}/.ssh. If you want to generate new pair remove them from .ssh_keys directory.")
                    }
                }
            }
        }
        stage ("Generate ssh keys") {
            steps {
                script {
                    println("Keys will be generated in ${HOME_PATH}")
                    sh "ssh-keygen -t ed25519 -N '' -f ${env.HOME_PATH}/.ssh/id_ed25519"
                }
            }
        }
        stage ("Add credentials to Jenkins") {
            steps {
                script {
                    sh "chmod +x scripts/add_ssh_credentials.sh"
                    sh "scripts/add_ssh_credentials.sh github_${params.AGENT_NAME}"
                }
            }
        }
        stage ("Input public key into GitHub") {
            steps {
                script {
                    sh "cat ${env.HOME_PATH}/.ssh/id_ed25519.pub"
                    def githubKeysAdded = input(id: "github_keys_added", message: "Copy shown public key to SSH keys on your GitHub account.")
                }
            }
        }
        stage ("Finalize SSH setup") {
            steps {
                script {
                    sh "ssh-keyscan github.com >> ~/.ssh/known_hosts"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}